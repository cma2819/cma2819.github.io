{"pageProps":{"slug":"Skills","content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    a: \"a\",\n    h4: \"h4\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"スキル詳細\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"設計・開発手法\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"ドメイン駆動設計\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"学習のために, \", _jsx(_components.a, {\n        href: \"https://www.shoeisha.co.jp/book/detail/9784798131610\",\n        children: \"実践ドメイン駆動設計\"\n      }), \"を読んでいます. 業務では, DDD が浸透していない環境の中で乱用することは避けつつ, 説明のつきやすい Entity + Value Object を用いた表現のみを採用していました.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"個人開発では, Laravel プロジェクトで戦術的 DDD を取り入れました. 結果, コード量が増大することやどう捉えても冗長なコードが表れる問題はありつつも, 整然としたコードが実現できることを感じました.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"これらを踏まえて, 複数人が関係するプロジェクトでは, 厳密なクリーンアーキテクチャに固執する必要はないと考えています. 方法論にこだわりすぎず, ドメインのコンテキストを理解して疎結合・高凝集なコードに表現することが重要だと考えています.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"テスト駆動開発\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://shop.ohmsha.co.jp/shopdetail/000000004967/\",\n        children: \"テスト駆動開発\"\n      }), \"を読了し, PHP に関わり始めたころに和田卓人さんの講演を聴講した経験から, 私の開発の軸になっています. サーバーサイドの開発においては, 自動テストがない環境での開発は考えられない程に定着しています.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"この開発手法は, テストコードを用いた, Red-Green-Refactoring のサイクルを回すことだと理解しています. 自動テストによってコードの正常性を担保し, 変更を恐れずにリファクタリングを行います. 業務においても, 「動いているコードは触らない」ではなく, 動いているコードこそ安全に保守すべきと考えています.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"言語\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"PHP\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"現職でサーバーサイド言語として採用しており, 個人開発でも使用しています.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"2年前に転職してから PHP を使い始めました. 当時のプロジェクトでは PHP 7.3 を採用していたため, それ以降の文法を習得しています.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"型安全なコーディングを意識して, IDE による型補完を活用した開発を行っています.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"フレームワーク\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"|name|version|\\r\\n|:--|:--|\\r\\n|Laravel|6 - 8|\\r\\n|Slim|2, 3|\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Laravel を業務及び個人開発で使っています. 業務では Laravel で実装されているアプリケーションのレビュアーやアーキテクチャ設計も担当しています. 公式ドキュメントに記載された基本的な機能は問題なく使うことができ, 必要に応じて Laravel 本体のソースを読み, 拡張することができます.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Slim では, 業務・個人開発ともに小規模なアプリケーションの構築に採用しました. Twig テンプレートを利用した画面を提供するアプリケーションと, シンプルな API を提供するアプリケーションの構築経験があります.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"JavaScript / TypeScript\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"業務では JavaScript, 個人の開発では TypeScript を利用しています.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"フロントエンドフレームワークを利用して, コンポーネントの作成や小規模な SPA の構築ができます. 後述する NodeCG を利用した個人開発が多いため, コンポーネント設計については業務経験を積むことが今後の課題です. アトミックデザインについて学んだことはありますが, 実践したことはありません.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"フレームワーク\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"|name|version|\\r\\n|:--|:--|\\r\\n|React|17-|\\r\\n|Vue.js|2|\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React は個人開発で採用しています. Vue.js は個人開発で利用していましたこともありますが, 最近は業務でのみ使用しています.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"個人開発では TypeScript で実装しています. Vue.js 2 + TypeScript での開発を1年ほど経験した後, Vue.js 3 への移行前に React の学習を始め, 現在は React を採用しています.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"モジュールバンドラについては, Vue.js のプロジェクトでは Parcel を使用していました. 最近採用している React のプロジェクトでは Webpack を使用しています.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Node.js\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"業務で簡単なスクリプトを作成することはありますが, 主に NodeCG による配信オーバーレイ開発のために使用します. Node.js においても TypeScript を使用し, 型安全なコードでの開発を行っています.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"フレームワーク\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"|name|version|\\r\\n|:--|:--|\\r\\n|NodeCG|1.1-|\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"NodeCG は express ベースの Web フレームワークで, 映像配信のオーバーレイ開発を目的としている OSS のフレームワークです. 趣味である RTA のイベント運営において, 動的に表示内容を変更するオーバーレイ開発に利用しています.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"2017 年に日本の RTA イベントで採用されていたことでフレームワークを知り, それ以降自身でも NodeCG を用いたオーバーレイ開発に取り組みました. NodeCG レイアウトを開発し, 自身で主催・運営している RTA イベントで活用しています. 国内での利用実績が少ないため, Qiita・Zenn での記事公開や, 公式の Discord サーバーで情報発信するなど, フレームワークの普及に取り組んでいます.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"その他経験のある言語\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Java\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"基本的な文法やプログラミングを学んだ言語です.\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"転職してからは使用する機会が減っていましたが, 最近改めて Java の静的型付けに魅力を感じ, Spring Boot を用いたアプリケーション開発を始めています.\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Stream やラムダ式などは問題なく使えますが, Java 9 以降に追加された機能については経験が少ないです.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Python3\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"django 2 で構築されたアプリケーションを改修し, AWS 上にホストして運用したことがある程度です.\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"学生時代の講義では Flask でのアプリケーション開発を学びました.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}